// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pqstream.proto

/*
Package pqs is a generated protocol buffer package.

It is generated from these files:
	pqstream.proto

It has these top-level messages:
	ListenRequest
	Event
*/
package pqs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// An operation in the database.
type Operation int32

const (
	Operation_UNKNOWN  Operation = 0
	Operation_INSERT   Operation = 1
	Operation_UPDATE   Operation = 2
	Operation_DELETE   Operation = 3
	Operation_TRUNCATE Operation = 4
)

var Operation_name = map[int32]string{
	0: "UNKNOWN",
	1: "INSERT",
	2: "UPDATE",
	3: "DELETE",
	4: "TRUNCATE",
}
var Operation_value = map[string]int32{
	"UNKNOWN":  0,
	"INSERT":   1,
	"UPDATE":   2,
	"DELETE":   3,
	"TRUNCATE": 4,
}

func (x Operation) String() string {
	return proto.EnumName(Operation_name, int32(x))
}
func (Operation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// A request to listen to database event streams.
type ListenRequest struct {
}

func (m *ListenRequest) Reset()                    { *m = ListenRequest{} }
func (m *ListenRequest) String() string            { return proto.CompactTextString(m) }
func (*ListenRequest) ProtoMessage()               {}
func (*ListenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// A database event.
type Event struct {
	Schema string    `protobuf:"bytes,1,opt,name=schema" json:"schema,omitempty"`
	Table  string    `protobuf:"bytes,2,opt,name=table" json:"table,omitempty"`
	Op     Operation `protobuf:"varint,3,opt,name=op,enum=pqs.Operation" json:"op,omitempty"`
	// payload is a json encoded representation of the changed object.
	Payload *google_protobuf.Struct `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *Event) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *Event) GetOp() Operation {
	if m != nil {
		return m.Op
	}
	return Operation_UNKNOWN
}

func (m *Event) GetPayload() *google_protobuf.Struct {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*ListenRequest)(nil), "pqs.ListenRequest")
	proto.RegisterType((*Event)(nil), "pqs.Event")
	proto.RegisterEnum("pqs.Operation", Operation_name, Operation_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PQStream service

type PQStreamClient interface {
	// Listen responds with a stream of database operations.
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (PQStream_ListenClient, error)
}

type pQStreamClient struct {
	cc *grpc.ClientConn
}

func NewPQStreamClient(cc *grpc.ClientConn) PQStreamClient {
	return &pQStreamClient{cc}
}

func (c *pQStreamClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (PQStream_ListenClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PQStream_serviceDesc.Streams[0], c.cc, "/pqs.PQStream/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &pQStreamListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PQStream_ListenClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type pQStreamListenClient struct {
	grpc.ClientStream
}

func (x *pQStreamListenClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PQStream service

type PQStreamServer interface {
	// Listen responds with a stream of database operations.
	Listen(*ListenRequest, PQStream_ListenServer) error
}

func RegisterPQStreamServer(s *grpc.Server, srv PQStreamServer) {
	s.RegisterService(&_PQStream_serviceDesc, srv)
}

func _PQStream_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PQStreamServer).Listen(m, &pQStreamListenServer{stream})
}

type PQStream_ListenServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type pQStreamListenServer struct {
	grpc.ServerStream
}

func (x *pQStreamListenServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _PQStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pqs.PQStream",
	HandlerType: (*PQStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _PQStream_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pqstream.proto",
}

func init() { proto.RegisterFile("pqstream.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4f, 0xc2, 0x30,
	0x18, 0xc5, 0xe9, 0x80, 0x01, 0x1f, 0x8a, 0x4b, 0x63, 0x74, 0xe1, 0x60, 0x08, 0x27, 0x62, 0x4c,
	0xa7, 0x18, 0x13, 0xaf, 0x46, 0x7a, 0x50, 0xc9, 0xc0, 0x32, 0xe2, 0xb9, 0xc3, 0x3a, 0x48, 0xc6,
	0xda, 0xad, 0x9d, 0x09, 0xff, 0x81, 0x7f, 0xb6, 0xa1, 0x03, 0x13, 0x4f, 0xfd, 0xde, 0x7b, 0x6d,
	0xf3, 0xfb, 0x1e, 0xf4, 0x54, 0xae, 0x4d, 0x21, 0xf8, 0x96, 0xa8, 0x42, 0x1a, 0x89, 0xeb, 0x2a,
	0xd7, 0xfd, 0x87, 0x64, 0x63, 0xd6, 0x65, 0x4c, 0x56, 0x72, 0x1b, 0x24, 0x32, 0xe5, 0x59, 0x12,
	0xd8, 0x34, 0x2e, 0xbf, 0x02, 0x65, 0x76, 0x4a, 0xe8, 0x40, 0x9b, 0xa2, 0x5c, 0x99, 0xc3, 0x51,
	0xbd, 0x1d, 0x9e, 0xc1, 0xe9, 0x74, 0xa3, 0x8d, 0xc8, 0x98, 0xc8, 0x4b, 0xa1, 0xcd, 0xf0, 0x07,
	0x41, 0x93, 0x7e, 0x8b, 0xcc, 0xe0, 0x0b, 0x70, 0xf5, 0x6a, 0x2d, 0xb6, 0xdc, 0x47, 0x03, 0x34,
	0xea, 0xb0, 0x83, 0xc2, 0xe7, 0xd0, 0x34, 0x3c, 0x4e, 0x85, 0xef, 0x58, 0xbb, 0x12, 0xf8, 0x0a,
	0x1c, 0xa9, 0xfc, 0xfa, 0x00, 0x8d, 0x7a, 0xe3, 0x1e, 0x51, 0xb9, 0x26, 0x33, 0x25, 0x0a, 0x6e,
	0x36, 0x32, 0x63, 0x8e, 0x54, 0xf8, 0x0e, 0x5a, 0x8a, 0xef, 0x52, 0xc9, 0x3f, 0xfd, 0xc6, 0x00,
	0x8d, 0xba, 0xe3, 0x4b, 0x92, 0x48, 0x99, 0xa4, 0x82, 0x1c, 0x31, 0xc9, 0xc2, 0x82, 0xb1, 0xe3,
	0xbd, 0xeb, 0x57, 0xe8, 0xfc, 0xfd, 0x81, 0xbb, 0xd0, 0x5a, 0x86, 0x6f, 0xe1, 0xec, 0x23, 0xf4,
	0x6a, 0x18, 0xc0, 0x7d, 0x09, 0x17, 0x94, 0x45, 0x1e, 0xda, 0xcf, 0xcb, 0xf9, 0xe4, 0x29, 0xa2,
	0x9e, 0xb3, 0x9f, 0x27, 0x74, 0x4a, 0x23, 0xea, 0xd5, 0xf1, 0x09, 0xb4, 0x23, 0xb6, 0x0c, 0x9f,
	0xf7, 0x49, 0x63, 0xfc, 0x08, 0xed, 0xf9, 0xfb, 0xc2, 0xb6, 0x86, 0x6f, 0xc0, 0xad, 0x76, 0xc6,
	0xd8, 0x82, 0xfe, 0x2b, 0xa0, 0x0f, 0xd6, 0xb3, 0x15, 0x0c, 0x6b, 0xb7, 0x28, 0x76, 0x2d, 0xdf,
	0xfd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x2d, 0x4c, 0x7a, 0x76, 0x01, 0x00, 0x00,
}
